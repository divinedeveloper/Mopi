package com.themopi.timeline.api

import java.awt.List;

import org.springframework.data.mongodb.core.query.Update.Each;

import grails.converters.JSON
import grails.transaction.Transactional

import com.themopi.account.User
import com.themopi.account.UserRole
import com.themopi.exceptions.TimelineException
import com.themopi.survey.Survey
import com.themopi.user.Followers
import com.themopi.user.Timeline

@Transactional
class TimelineService {

	def userService
	def surveyService
    def serviceMethod() {}
	
	/*int errorCode = grailsApplication.config.customExceptions.timeline.fourZeroFour.timeline.errorCode
	 int status = grailsApplication.config.customExceptions.timeline.fourZeroFour.timeline.status
	 String message = grailsApplication.config.customExceptions.timeline.fourZeroFour.timeline.message
	 String extendedMessage = grailsApplication.config.customExceptions.timeline.fourZeroFour.timeline.extendedMessage
	 String moreInfo = grailsApplication.config.customExceptions.timeline.fourZeroFour.timeline.moreInfo
	 */
	def createCommentSurveyTimeline(request,userId,surveyId)
	{
		try
		{
			String tokenValue = request.getHeader('X-Auth-Token')
			UserRole userRole = userService.getUserAndRoleByAuthToken(tokenValue);
			
			def timeline = new Timeline(
				action:request.getJSON().action,
				type:request.getJSON().type,
				isActive:request.getJSON().isActive,
				dateCreated:new Date(),
				lastUpdated:new Date()
				);
			if(surveyId==null || surveyId.equals(null) || surveyId.equals("null") || surveyId=="null")
			{
				User user = userRole.user;
				User performedByUser = User.findById(userId);
				
				timeline.performedBy=performedByUser
				timeline.user=performedByUser
				timeline['performedOn'] = new JSON(user).toString();
			}
			else
			{
				User performedByUser = userRole.user;
				//User user = User.findById(userId);
				
				timeline.performedBy=performedByUser
				timeline.user=performedByUser
				Survey survey = surveyService.getSurveyById(surveyId)
				timeline['performedOn'] = new JSON(survey).toString();
			}
			if(!timeline.save())
			{
				return "Not Save"
			}
			else
			{
				return timeline;
			}
		}
		catch(TimelineException et)
		{
			return "Error occuring When saving"
		}
		catch(Exception e)
		{
			return "Error occuring When saving"
		}
	}
	def createFollowingUserTimeline()
	{
		
	}
	def createLikeSurveyTimeline()
	{
		
	}
	def updateCommentSurveyTimeline()
	{
		
	}
	def updateFollowingUserTimeline()
	{
		
	}
	def updateLikeSurveyTimeline()
	{
		
	}
	def getFollowingUserTimeline(request)
	{
		String tokenValue = request.getHeader('X-Auth-Token')
		UserRole userRole = userService.getUserAndRoleByAuthToken(tokenValue);
		User user = userRole.user;
		def followee=Followers.findAllByFollower(user)
		println "------followee-----s---" + followee
		println "------followee.followee-----s---" + followee.followee
		def timeline=Timeline.findAllByPerformedByInList(followee.followee)
		println "timeline----"+timeline
		return timeline
	}
	def getUserTimeline(request)
	{
		String tokenValue = request.getHeader('X-Auth-Token')
		UserRole userRole = userService.getUserAndRoleByAuthToken(tokenValue);
		User user = userRole.user;
		def followers=Followers.findAllByFollowee(user)
		println "------followers-----s---" + followers
		println "------followers.followers-----s---" + followers.follower
		def timeline=Timeline.findAllByPerformedByInList(followers.follower)
		println "timeline----"+timeline
		return timeline
	}
	def getLikeSurveyTimeline()
	{
		
	}
	
}
