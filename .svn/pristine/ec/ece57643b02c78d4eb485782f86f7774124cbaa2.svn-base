package com.themopi.apis.searchactivity

import com.themopi.exceptions.SurveyException
import com.themopi.account.*
import grails.mongodb.geo.Distance
import grails.mongodb.geo.Metric
import grails.transaction.Transactional
import com.themopi.survey.*
import com.themopi.apis.*
import com.themopi.exceptions.SurveyException
import com.themopi.surveyactivity.*
import com.themopi.user.*

@Transactional
class SurveySearchService {
	static transactional = 'mongo'
	def userService
	def userSurveyService
	def grailsApplication
	/**
	 * function to get survey search results along with count for that search
	 * 
	 * @param tokenValue
	 * @param name
	 * @param status
	 * @param offset
	 * @param limit
	 * @return  map with search results and total count for search
	 */
	def search(tokenValue,name,status,offset,limit){
		UserRole userRole = userService.getUserAndRoleByAuthToken(tokenValue);
		def user = userRole?.user
		def survey = Survey.createCriteria()
		def results = []
		def surveyCount = 0
		if(userRole?.role?.authority == "ROLE_SUPERADMIN" || userRole?.role?.authority == "ROLE_ADMIN"){
			if(status == "" && name == ""){
				results = survey.list(max:limit,offset:offset){
				}
				surveyCount = Survey.count()
			}else if(name == "" && status != ""){
				results = survey.list(max:limit,offset:offset){ eq('status',status) }
				surveyCount = Survey.countByStatus(status)
			}else if(status == "" && name != ""){
				results = survey.list(max:limit,offset:offset){
					or{
						ilike("name","%"+name+"%")
						ilike("surveyCode","%"+name+"%")
					}
				}
				def countList = survey.list(){
					or{
						ilike("name","%"+name+"%")
						ilike("surveyCode","%"+name+"%")
					}
				}
				surveyCount = countList.size()
			}else{
				results = survey.list(max:limit,offset:offset){
					eq('status',status)
					or{
						ilike("name","%"+name+"%")
						ilike("surveyCode","%"+name+"%")
					}
				}
				def countList = survey.list(max:limit,offset:offset){
					eq('status',status)
					or{
						ilike("name","%"+name+"%")
						ilike("surveyCode","%"+name+"%")
					}
				}
				surveyCount = countList.size()
			}
			Map result = [results:results,count:surveyCount]
			return result
		}else if(userRole?.role?.authority == "ROLE_SPONSEREDADMIN"){
			if(status == "" && name == ""){
				results = survey.list(max:limit,offset:offset){ eq('user',user) }
				def countList = survey.list(){ eq('user',user) }
				surveyCount = countList.size();
			}else if(name == "" && status != ""){
				results = survey.list(max:limit,offset:offset){
					eq('status',status)
					eq('user',user)
				}

				def countList = survey.list(){
					eq('status',status)
					eq('user',user)
				}
				surveyCount = countList.size()
			}else if(status == "" && name != ""){
				results = survey.list(max:limit,offset:offset){
					or{
						ilike("name","%"+name+"%")
						ilike("surveyCode","%"+name+"%")
					}
					eq('user',user)
				}
				def countList = survey.list(){
					or{
						ilike("name","%"+name+"%")
						ilike("surveyCode","%"+name+"%")
					}
					eq('user',user)
				}
				surveyCount = countList.size()
			}else{
				results = survey.list(max:limit,offset:offset){
					eq('status',status)
					or{
						ilike("name","%"+name+"%")
						ilike("surveyCode","%"+name+"%")
					}
					eq('user',user)
				}
				def countList = survey.list(max:limit,offset:offset){
					eq('status',status)
					or{
						ilike("name","%"+name+"%")
						ilike("surveyCode","%"+name+"%")
					}
					eq('user',user)
				}
				surveyCount = countList.size()
			}
			Map result = [results:results,count:surveyCount]
			return result
		}
	}

	
	def appSearch(searchCategory,limit,offset,location,authToken,hashTagId){
		List surveys = []
		def count = 0
		Calendar cal = Calendar.getInstance();
		Date date = new Date();
		cal.setTime(date);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MILLISECOND, 0);
		println "Distance  === "+getDistanceFromLatLonInKm()
		Metric metric = Metric.KILOMETERS
		Distance d = new Distance(grailsApplication.config.appsearch.trending.distance,metric)
		def trendingLimit = grailsApplication.config.appsearch.trending.maxLimit
		def trendingDays = grailsApplication.config.appsearch.trending.createdAfterInDays
		def sponsorDays = grailsApplication.config.appsearch.sponsor.createdAfterInDays
		def sponsorLimit = grailsApplication.config.appsearch.sponsor.maxLimit
		def exploreLimit = grailsApplication.config.appsearch.explore.maxLimit
		
		UserRole userRole = userService.getUserAndRoleByAuthToken(authToken);
		def user = userRole?.user
		def followeeList = Followers.findAllByFollower(user)
	   
		
		println "begining of date method  == "+cal.getTime()
		if(searchCategory == "explore" || searchCategory == "hashTag"){
			if(limit.toInteger()+offset.toInteger() <= exploreLimit){
				def surveyCriteria = Survey.createCriteria()
				surveys = surveyCriteria.list(max:limit,offset:offset){
					eq('status','Active')
					or{
						lte('endTime',cal.getTime())
						eq('endTime',null)
					}
					
					or {
						eq('visibleTo',"EveryOne")
						and{
							eq('visibleTo',"Individual")
							eq("individuals._id",user.id.toLong())
						}
						and{
							eq('visibleTo',"Followers")
							inList('user',followeeList.followee)
						}
					}
					
					if(searchCategory == "hashTag"){
						eq("hashTag",hashTagId.toInteger())
					}
					order("lastUpdated", "desc")
				}
			//	surveys = Survey.findAllByStatusAnd("Active",[max: limit, sort: "lastUpdated", order: "desc", offset:offset])
				def surveysList =  surveyCriteria.list(){
					eq('status','Active')
					or{
						lte('endTime',cal.getTime())
						eq('endTime',null)
					}
					
					or {
						eq('visibleTo',"EveryOne")
						and{
							eq('visibleTo',"Individual")
							eq("individuals._id",user.id.toLong())
						}
						and{
							eq('visibleTo',"Followers")
							inList('user',followeeList.followee)
						}
					}
					if(searchCategory == "hashTag"){
						eq("hashTag",hashTagId.toInteger())
					}
					order("lastUpdated", "desc")
				}
				count = surveysList.size()
				if(count >= exploreLimit){
					count = exploreLimit
				}
				return [surveys:surveys,count:count]
			}else if(offset.toInteger() < exploreLimit){
				limit = exploreLimit - offset;
				def surveyCriteria = Survey.createCriteria()
				surveys = surveyCriteria.list(max:limit,offset:offset){
					eq('status','Active')
					or{
						lte('endTime',cal.getTime())
						eq('endTime',null)
					}
					
					or {
						eq('visibleTo',"EveryOne")
						and{
							eq('visibleTo',"Individual")
							eq("individuals._id",user.id.toLong())
						}
						and{
							eq('visibleTo',"Followers")
							inList('user',followeeList.followee)
						}
					}
					if(searchCategory == "hashTag"){
						eq("hashTag",hashTagId.toInteger())
					}
					order("lastUpdated", "desc")
				}
				count = exploreLimit
				return [surveys:surveys,count:count]
			}else if(offset.toInteger() >= exploreLimit){
				int errorCode = grailsApplication.config.customExceptions.survey.fourZeroZero.trendingOffset.errorCode
				int status = grailsApplication.config.customExceptions.survey.fourZeroZero.trendingOffset.status
				String message = grailsApplication.config.customExceptions.survey.fourZeroZero.trendingOffset.message
				String extendedMessage = grailsApplication.config.customExceptions.survey.fourZeroZero.trendingOffset.extendedMessage
				String moreInfo = grailsApplication.config.customExceptions.survey.fourZeroZero.trendingOffset.moreInfo

				throw new SurveyException(status,errorCode,message,extendedMessage,moreInfo)

			}
		}else if(searchCategory == "trending"){
		if(limit.toInteger()+offset.toInteger() <= trendingLimit){
			
			 println followeeList.followee
			Calendar calendarForStartTime = Calendar.getInstance()
			calendarForStartTime.set(Calendar.HOUR_OF_DAY, 0);
			calendarForStartTime.set(Calendar.MINUTE,0);
			calendarForStartTime.set(Calendar.SECOND,0);
			calendarForStartTime.add(Calendar.DATE, -(trendingDays-1))
			println "StartTime  === "+calendarForStartTime.getTime()
			/*
			 * diatance formula to convert ditance into radian (2*pi*pi/180)*radius in km)
			 * (2*pi*pi/180) is radian in full circle
			 * radius is distance in which we need to find survey
			 */
			def surveyCriteria = Survey.createCriteria()
				surveys = surveyCriteria.list(max:limit,offset:offset){
					
					eq('status','Active')
					or{
						lte('endTime',cal.getTime())
						eq('endTime',null)
					}
					or{
						gte('startTime',calendarForStartTime.getTime())
						gte('dateCreated',calendarForStartTime.getTime())
					}
					
					println "User === "+user.id.toString()
					
					//eq('individuals.roleId',user.id)
					or {
						eq('visibleTo',"EveryOne")
						and{
							eq('visibleTo',"Individual")
							eq("individuals._id",user.id.toLong())
						}
                        and{
                            eq('visibleTo',"Followers")
						    inList('user',followeeList.followee)
                        }
					}
					
					if(location == "national"){
					 eq('visiblityCountry.name',user?.address?.embedCountry)
					}
					if(location == "closest"){
						println "lat == "+user.address.location.lat
						println " long == "+user.address.location.long
						println "radian == "+d.inRadians()
						withinCircle('visiblityCity.location',[[user.address.location.lat,user.address.location.long],d.inRadians()])
						//near('visiblityCity.location',[user.address.location.lat,user.address.location.long])
						
					}
					order("responses", "desc")
					order("lastUpdated", "desc")
					
					
				}
			//	surveys = Survey.findAllByStatusAnd("Active",[max: limit, sort: "lastUpdated", order: "desc", offset:offset])
				def surveysList =  surveyCriteria.list(){
					
					eq('status','Active')
					or{
						lte('endTime',cal.getTime())
						eq('endTime',null)
					}
					or{
						gte('startTime',calendarForStartTime.getTime())
						gte('dateCreated',calendarForStartTime.getTime())
					}
					
					or {
						eq('visibleTo',"EveryOne")
						and{
							eq('visibleTo',"Individual")
							eq("individuals._id",user.id.toLong())
						}
                        and{
                            eq('visibleTo',"Followers")
						    inList('user',followeeList.followee)
                        }
					}
					
					if(location == "national"){
					 eq('visiblityCountry.name',user?.address?.embedCountry)
					}
					if(location == "closest"){
						println "lat == "+user.address.location.lat
						println " long == "+user.address.location.long
						println "radian == "+d.inRadians()
						withinCircle('visiblityCity.location',[[user.address.location.lat,user.address.location.long],d.inRadians()])
				
					}
					order("responses", "desc")
					order("lastUpdated", "desc")
					
				}
				count = surveysList.size()
				if(count >= trendingLimit){
					count = trendingLimit
				}
				return [surveys:surveys,count:count]
			}else if(offset.toInteger() < trendingLimit){
				limit = trendingLimit - offset;
				def surveyCriteria = Survey.createCriteria()
				surveys = surveyCriteria.list(max:limit,offset:offset){
					eq('status','Active')
					or{
						lte('endTime',cal.getTime())
						eq('endTime',null)
					}
					or{
						gte('startTime',calendarForStartTime.getTime())
						gte('dateCreated',calendarForStartTime.getTime())
					}
					println "user ========== "+user.id
					or {
						eq('visibleTo',"EveryOne")
						and{
							eq('visibleTo',"Individual")
							eq("individuals._id",user.id.toLong())
						}
                        and{
                            eq('visibleTo',"Followers")
						    inList('user',followeeList.followee)
                        }
					}
					
					if(location == "national"){
					 eq('visiblityCountry.name',user?.address?.embedCountry)
					}
					if(location == "closest"){
						
						println "lat == "+user.address.location.lat
						println " long == "+user.address.location.long
						println "radian == "+d.inRadians()
						withinCircle('visiblityCity.location',[[user.address.location.lat,user.address.location.long],d.inRadians()])
				
					}
					order("responses", "desc")
					order("lastUpdated", "desc")
				}
				count = trendingLimit
				return [surveys:surveys,count:count]
			}else if(offset.toInteger() >= trendingLimit){
				int errorCode = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.errorCode
				int status = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.status
				String message = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.message
				String extendedMessage = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.extendedMessage
				String moreInfo = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.moreInfo

				throw new SurveyException(status,errorCode,message,extendedMessage,moreInfo)

			}
		}else if(searchCategory == "sponsor"){
		if(limit.toInteger()+offset.toInteger() <= sponsorLimit){
			
			 println followeeList.followee
			Calendar calendarForStartTime = Calendar.getInstance()
			calendarForStartTime.set(Calendar.HOUR_OF_DAY, 0);
			calendarForStartTime.set(Calendar.MINUTE,0);
			calendarForStartTime.set(Calendar.SECOND,0);
			calendarForStartTime.add(Calendar.DATE, -(sponsorDays-1))
			println "StartTime  === "+calendarForStartTime.getTime()
			/*
			 * diatance formula to convert ditance into radian (2*pi*pi/180)*radius in km)
			 * (2*pi*pi/180) is radian in full circle
			 * radius is distance in which we need to find survey
			 */
			def surveyCriteria = Survey.createCriteria()
				surveys = surveyCriteria.list(max:limit,offset:offset){
					
					eq('status','Active')
					or{
						lte('endTime',cal.getTime())
						eq('endTime',null)
					}
					or{
						gte('startTime',calendarForStartTime.getTime())
						gte('dateCreated',calendarForStartTime.getTime())
					}
					
					println "User === "+user.id.toString()
					
					eq('surveyType',"sponsered")
					or {
						eq('visibleTo',"EveryOne")
						and{
							eq('visibleTo',"Individual")
							eq("individuals._id",user.id.toLong())
						}
                        and{
                            eq('visibleTo',"Followers")
						    inList('user',followeeList.followee)
                        }
					}
					
					if(location == "national"){
					 eq('visiblityCountry.name',user?.address?.embedCountry)
					}
					if(location == "closest"){
						println "lat == "+user.address.location.lat
						println " long == "+user.address.location.long
						println "radian == "+d.inRadians()
						withinCircle('visiblityCity.location',[[user.address.location.lat,user.address.location.long],d.inRadians()])
				
					}
					order("responses", "desc")
					order("lastUpdated", "desc")
					
					
				}
			//	surveys = Survey.findAllByStatusAnd("Active",[max: limit, sort: "lastUpdated", order: "desc", offset:offset])
				def surveysList =  surveyCriteria.list(){
					
					eq('status','Active')
					or{
						lte('endTime',cal.getTime())
						eq('endTime',null)
					}
					or{
						gte('startTime',calendarForStartTime.getTime())
						gte('dateCreated',calendarForStartTime.getTime())
					}
					
					or {
						eq('visibleTo',"EveryOne")
						and{
							eq('visibleTo',"Individual")
							eq("individuals._id",user.id.toLong())
						}
                        and{
                            eq('visibleTo',"Followers")
						    inList('user',followeeList.followee)
                        }
					}
					
					if(location == "national"){
					 eq('visiblityCountry.name',user?.address?.embedCountry)
					}
					if(location == "closest"){
						println "lat == "+user.address.location.lat
						println " long == "+user.address.location.long
						println "radian == "+d.inRadians()
						withinCircle('visiblityCity.location',[[user.address.location.lat,user.address.location.long],d.inRadians()])
				
					}
					order("responses", "desc")
					order("lastUpdated", "desc")
					
				}
				count = surveysList.size()
				if(count >= sponsorLimit){
					count = sponsorLimit
				}
				return [surveys:surveys,count:count]
			}else if(offset.toInteger() < sponsorLimit){
				limit = trendingLimit - offset;
				def surveyCriteria = Survey.createCriteria()
				surveys = surveyCriteria.list(max:limit,offset:offset){
					eq('status','Active')
					or{
						lte('endTime',cal.getTime())
						eq('endTime',null)
					}
					or{
						gte('startTime',calendarForStartTime.getTime())
						gte('dateCreated',calendarForStartTime.getTime())
					}
					println "user ========== "+user.id
					or {
						eq('visibleTo',"EveryOne")
						and{
							eq('visibleTo',"Individual")
							eq("individuals._id",user.id.toLong())
						}
                        and{
                            eq('visibleTo',"Followers")
						    inList('user',followeeList.followee)
                        }
					}
					
					if(location == "national"){
					 eq('visiblityCountry.name',user?.address?.embedCountry)
					}
					if(location == "closest"){
						
						println "lat == "+user.address.location.lat
						println " long == "+user.address.location.long
						println "radian == "+d.inRadians()
						withinCircle('visiblityCity.location',[[user.address.location.lat,user.address.location.long],d.inRadians()])
				
					}
					order("responses", "desc")
					order("lastUpdated", "desc")
				}
				count = sponsorLimit
				return [surveys:surveys,count:count]
			}else if(offset.toInteger() >= sponsorLimit){
				int errorCode = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.errorCode
				int status = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.status
				String message = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.message
				String extendedMessage = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.extendedMessage
				String moreInfo = grailsApplication.config.customExceptions.survey.fourZeroZero.exploreOffset.moreInfo

				throw new SurveyException(status,errorCode,message,extendedMessage,moreInfo)

			}
		}
	}
	
	def getDistanceFromLatLonInKm() {
	def lat1 = 19.031932
	 def lon1 = 73.024482
	def  lat2 = 19.0723058
	def lon2 = 73.00067739999997
		def R = 6371; // Radius of the earth in miles
		def dLat = deg2rad(lat2-lat1);  // deg2rad below
		def dLon = deg2rad(lon2-lon1);
		def a =	  Math.sin(dLat/2) * Math.sin(dLat/2) +
			  Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
			  Math.sin(dLon/2) * Math.sin(dLon/2)
			;
		def c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
		def d = R * c; // Distance in km
		return d;
	}

	def deg2rad(deg) {
		return deg * (Math.PI/180)
	}
	
	def serviceMethod() {
	}
}
